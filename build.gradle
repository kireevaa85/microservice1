buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.springframework.boot" version "2.6.3"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "org.liquibase.gradle" version "2.1.1"
    id "org.sonarqube" version "2.8"
    id "com.palantir.docker" version "0.25.0"
    id "com.avast.gradle.docker-compose" version "0.13.4"
    id "java"
    id "idea"
    id "application"
    id "maven-publish"
    id "io.freefair.lombok" version "6.4.1"
}

group = "ru.connector"
version = "1.0.0.${BUILD_ID}"
mainClassName = "ru.connector.microservice1.Microservice1Application"
sourceCompatibility = 17
targetCompatibility = 17

configurations {
    testImplementation {
        /* Exclude JUnit4, because JUnit 5 MUST be used */
        exclude group: "junit", module: "junit"
    }
}

jar {
    manifest {
        attributes "Version": archiveVersion,
                   "Build-time": new Date().format("dd-MM-yyyy'T'HH:mm:ss")
    }
}

java {
    withSourcesJar();
}

repositories {
    mavenCentral()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

extensions.getUserInfo = {
    def gitUser = "git config user.name".execute().text.replaceAll("\\s+", "")
    def gitMail = "git config user.email".execute().text.replaceAll("\\s+", "")
    return "${gitUser}_${gitMail}"
}

bootRun {
    if (project.hasProperty("args")) {
        args project.args.split(',')
    } else {
        def list = new ArrayList()
        list.add("--docker.instanceId=${project.name}")
        args list
    }
}
